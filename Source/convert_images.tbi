######################################################################
# Readme
######################################################################
# Execute this job:
#   - connect to `nic` via ssh: `ssh username@nic` (enter passwd)
#   - start job: `condor_submit /path/to/this/file.tbi`
# 
# Monitor jobs:
#   - see machines: `condor_status`
#   - see queue: `condor_q`
#   - keep monitoring queue: `watch condor_q` (quit with ctrl + c)
# 
# Find out more at:
# http://www.iac.es/sieinvens/siepedia/pmwiki.php?n=HOWTOs.CondorHowTo
######################################################################


######################################################################
# Necessary parameters
######################################################################

# Shell script that you want to execute
cmd = /work/scratch/stegmaier/Projects/2024/AchenbachUKA_MeshNerveRegistration/Source/py-registration-pipeline/perform_image_transformation.sh

# command line arguments
args =

# start directory
initialdir = /work/scratch/stegmaier/Projects/2024/AchenbachUKA_MeshNerveRegistration/Source/py-registration-pipeline

# define output, error and log file
output = /work/scratch/stegmaier/logs/loc_$(cluster).$(Process)_out.log
error = /work/scratch/stegmaier/logs/loc_$(cluster).$(Process)_err.log
log = /work/scratch/stegmaier/logs/loc_$(cluster).$(Process)_log.log

# working environments
getenv        = True
environment   = "working_dir=/netshares/scratch/stegmaier/Software/Environments/meshnerveregistration data_dir=/work/scratch/stegmaier/Projects/2024/AchenbachUKA_MeshNerveRegistration/Source/"


######################################################################
# Optional parameters
######################################################################

# If your job quits with an exit codes other then 0 (that means an error occured) it will be held. Without this it will be cancelled.

on_exit_hold = (ExitBySignal == True) || (ExitCode != 0)


## A nice job will note change your priority. You can use this statement when you have enough time to wait for your results

nice_user = True

# Choose if job should run on cluster or workstation node. If unset job will run on eachy available node. Options are "cluster" or "workstation"
# requirements = POOL =="workstation"
# requirements = (POOL == "cpucluster" || POOL =="cluster")
#
# request a certain machine
# 
#
# Aware: Use this statement carefully. Better let the central manager decide on which node your jobs will run. Otherwise you'll risk a long waiting time or block resources for other users.
#
# requirements = TARGET.Machine=="abacus.lfb.rwth-aachen.de"
#
# required GPU RAM (MB)

# requirements = (CUDAGlobalMemoryMb > 4000) && (CUDAGlobalMemoryMb < 48000)  # if you don't need much vram, please reduce requirements to skip 48GB cards if queue is full with bigger jobs.


## Please do not use variable GPURAM. It's depricated

# use only a gpu that supports half precision
# requirements = (HALF_PREC == 1)

# only use machines where docker is able to run (has been checked before starting condor daemon)
# requirements = TARGET.has_docker

# You can filter CPU Flags (e.g. AVX2) to get only nodes who are able to run your code. (to check all available codec use "condor_status abacus -autoformat:th Name CPUFLAGS |grep -v slot1_ ")
# requirements = TARGET.has_avx2


#
# Attention: You can only set one requirement line. Add more requirements by using && e.g.
#
# requirements = (CUDAGlobalMemoryMb > 4000) && (CUDAGlobalMemoryMb < 20000) && POOL =="workstation"
# requirements = (CUDAGlobalMemoryMb > 4000) && (CUDAGlobalMemoryMb < 20000) && TARGET.Machine=="abacus.lfb.rwth-aachen.de"
# Hint: Use (CUDAGlobalMemoryMb > 5800) to match all GTX 1660 Super and GTX 1060
# Example: (Use Workstation Pool, videocards with more then 5.8 GB but less then 16 GB VRAM and exclude all RTX 3090)
requirements = 

# required number of CPU cores
request_cpus = 1 

# required number of GPUs
request_gpus = 0

# required CPU RAM
request_memory = 128 GB

# required Disk space

request_disk = 100 GB

# criterion after which to choose the machine
# e.g. `rank = memory` takes machine with largest RAM
# rank = memory

# number of seconds to wait before executing job 
# deferral_time = (CurrentTime + 1)



######################################################################
# Further preferences
######################################################################

# sync logfile to logfiles instead of copying them after finishing
stream_error = true
stream_output = true
should_transfer_files = IF_NEEDED

# run with user's account
run_as_owner = True
load_profile = True

# number of executions of this job
queue 1 

# if you want to use a range of arguments, 
# you can add them like this, one set of argumetns per line
queue 1 arguments from (
"/netshares/BiomedicalImageAnalysis/Projects/AchenbachUKA_MeshNerveRegistration/Processing/Block1/Padded/96HE/Padded_Large/ /netshares/scratch/stegmaier/Projects/2024/AchenbachUKA_MeshNerveRegistration/Processing/Block1/Transformations/rigid_lowres_parameters/ /netshares/BiomedicalImageAnalysis/Projects/AchenbachUKA_MeshNerveRegistration/Processing/Block1/Registered/ 80 38HE"
"/netshares/BiomedicalImageAnalysis/Projects/AchenbachUKA_MeshNerveRegistration/Processing/Block1/Padded/96HE/Padded_Large/ /netshares/scratch/stegmaier/Projects/2024/AchenbachUKA_MeshNerveRegistration/Processing/Block1/Transformations/rigid_lowres_parameters/ /netshares/BiomedicalImageAnalysis/Projects/AchenbachUKA_MeshNerveRegistration/Processing/Block1/Registered/ 80 43HE"
"/netshares/BiomedicalImageAnalysis/Projects/AchenbachUKA_MeshNerveRegistration/Processing/Block1/Padded/96HE/Padded_Large/ /netshares/scratch/stegmaier/Projects/2024/AchenbachUKA_MeshNerveRegistration/Processing/Block1/Transformations/rigid_lowres_parameters/ /netshares/BiomedicalImageAnalysis/Projects/AchenbachUKA_MeshNerveRegistration/Processing/Block1/Registered/ 80 47Cy"
"/netshares/BiomedicalImageAnalysis/Projects/AchenbachUKA_MeshNerveRegistration/Processing/Block1/Padded/96HE/Padded_Large/ /netshares/scratch/stegmaier/Projects/2024/AchenbachUKA_MeshNerveRegistration/Processing/Block1/Transformations/rigid_lowres_parameters/ /netshares/BiomedicalImageAnalysis/Projects/AchenbachUKA_MeshNerveRegistration/Processing/Block1/Registered/ 80 50Cy"
"/netshares/BiomedicalImageAnalysis/Projects/AchenbachUKA_MeshNerveRegistration/Processing/Block1/Padded/96HE/Padded_Large/ /netshares/scratch/stegmaier/Projects/2024/AchenbachUKA_MeshNerveRegistration/Processing/Block1/Transformations/rigid_lowres_parameters/ /netshares/BiomedicalImageAnalysis/Projects/AchenbachUKA_MeshNerveRegistration/Processing/Block1/Registered/ 80 96HE"
"/netshares/BiomedicalImageAnalysis/Projects/AchenbachUKA_MeshNerveRegistration/Processing/Block1/Padded/96HE/Padded_Large/ /netshares/scratch/stegmaier/Projects/2024/AchenbachUKA_MeshNerveRegistration/Processing/Block1/Transformations/rigid_lowres_parameters/ /netshares/BiomedicalImageAnalysis/Projects/AchenbachUKA_MeshNerveRegistration/Processing/Block1/Registered/ 80 Cy7E"
)